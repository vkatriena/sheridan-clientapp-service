//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClientApplication.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CustomerModel", Namespace="http://schemas.datacontract.org/2004/07/Final_Katrina_Mehta")]
    [System.SerializableAttribute()]
    public partial class CustomerModel : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CustomerIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CustomerNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int YTDOrdersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int YTDSalesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CustomerID {
            get {
                return this.CustomerIDField;
            }
            set {
                if ((this.CustomerIDField.Equals(value) != true)) {
                    this.CustomerIDField = value;
                    this.RaisePropertyChanged("CustomerID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CustomerName {
            get {
                return this.CustomerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CustomerNameField, value) != true)) {
                    this.CustomerNameField = value;
                    this.RaisePropertyChanged("CustomerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int YTDOrders {
            get {
                return this.YTDOrdersField;
            }
            set {
                if ((this.YTDOrdersField.Equals(value) != true)) {
                    this.YTDOrdersField = value;
                    this.RaisePropertyChanged("YTDOrders");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int YTDSales {
            get {
                return this.YTDSalesField;
            }
            set {
                if ((this.YTDSalesField.Equals(value) != true)) {
                    this.YTDSalesField = value;
                    this.RaisePropertyChanged("YTDSales");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OrderModel", Namespace="http://schemas.datacontract.org/2004/07/Final_Katrina_Mehta")]
    [System.SerializableAttribute()]
    public partial class OrderModel : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AmountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CustomerIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> FilledDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime OrderDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int OrderIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Amount {
            get {
                return this.AmountField;
            }
            set {
                if ((this.AmountField.Equals(value) != true)) {
                    this.AmountField = value;
                    this.RaisePropertyChanged("Amount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CustomerID {
            get {
                return this.CustomerIDField;
            }
            set {
                if ((this.CustomerIDField.Equals(value) != true)) {
                    this.CustomerIDField = value;
                    this.RaisePropertyChanged("CustomerID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> FilledDate {
            get {
                return this.FilledDateField;
            }
            set {
                if ((this.FilledDateField.Equals(value) != true)) {
                    this.FilledDateField = value;
                    this.RaisePropertyChanged("FilledDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime OrderDate {
            get {
                return this.OrderDateField;
            }
            set {
                if ((this.OrderDateField.Equals(value) != true)) {
                    this.OrderDateField = value;
                    this.RaisePropertyChanged("OrderDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OrderID {
            get {
                return this.OrderIDField;
            }
            set {
                if ((this.OrderIDField.Equals(value) != true)) {
                    this.OrderIDField = value;
                    this.RaisePropertyChanged("OrderID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Status {
            get {
                return this.StatusField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusField, value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InsertCustomer", ReplyAction="http://tempuri.org/IService/InsertCustomerResponse")]
        void InsertCustomer(string name, int orders, int sales);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/InsertCustomer", ReplyAction="http://tempuri.org/IService/InsertCustomerResponse")]
        System.IAsyncResult BeginInsertCustomer(string name, int orders, int sales, System.AsyncCallback callback, object asyncState);
        
        void EndInsertCustomer(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateCustomer", ReplyAction="http://tempuri.org/IService/UpdateCustomerResponse")]
        void UpdateCustomer(int id, string name, int orders, int sales);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/UpdateCustomer", ReplyAction="http://tempuri.org/IService/UpdateCustomerResponse")]
        System.IAsyncResult BeginUpdateCustomer(int id, string name, int orders, int sales, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateCustomer(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteCustomer", ReplyAction="http://tempuri.org/IService/DeleteCustomerResponse")]
        void DeleteCustomer(int id);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/DeleteCustomer", ReplyAction="http://tempuri.org/IService/DeleteCustomerResponse")]
        System.IAsyncResult BeginDeleteCustomer(int id, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteCustomer(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetCustomers", ReplyAction="http://tempuri.org/IService/GetCustomersResponse")]
        ClientApplication.ServiceReference1.CustomerModel[] GetCustomers();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/GetCustomers", ReplyAction="http://tempuri.org/IService/GetCustomersResponse")]
        System.IAsyncResult BeginGetCustomers(System.AsyncCallback callback, object asyncState);
        
        ClientApplication.ServiceReference1.CustomerModel[] EndGetCustomers(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetOrders", ReplyAction="http://tempuri.org/IService/GetOrdersResponse")]
        ClientApplication.ServiceReference1.OrderModel[] GetOrders();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/GetOrders", ReplyAction="http://tempuri.org/IService/GetOrdersResponse")]
        System.IAsyncResult BeginGetOrders(System.AsyncCallback callback, object asyncState);
        
        ClientApplication.ServiceReference1.OrderModel[] EndGetOrders(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InsertOrder", ReplyAction="http://tempuri.org/IService/InsertOrderResponse")]
        void InsertOrder(int customerId, System.DateTime orderedDate, System.DateTime filledDate, string status, int amount);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/InsertOrder", ReplyAction="http://tempuri.org/IService/InsertOrderResponse")]
        System.IAsyncResult BeginInsertOrder(int customerId, System.DateTime orderedDate, System.DateTime filledDate, string status, int amount, System.AsyncCallback callback, object asyncState);
        
        void EndInsertOrder(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateOrder", ReplyAction="http://tempuri.org/IService/UpdateOrderResponse")]
        void UpdateOrder(int id, int customerId, System.DateTime orderedDate, System.DateTime filledDate, string status, int amount);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/UpdateOrder", ReplyAction="http://tempuri.org/IService/UpdateOrderResponse")]
        System.IAsyncResult BeginUpdateOrder(int id, int customerId, System.DateTime orderedDate, System.DateTime filledDate, string status, int amount, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateOrder(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteOrder", ReplyAction="http://tempuri.org/IService/DeleteOrderResponse")]
        void DeleteOrder(int id);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/DeleteOrder", ReplyAction="http://tempuri.org/IService/DeleteOrderResponse")]
        System.IAsyncResult BeginDeleteOrder(int id, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteOrder(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : ClientApplication.ServiceReference1.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCustomersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCustomersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ClientApplication.ServiceReference1.CustomerModel[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ClientApplication.ServiceReference1.CustomerModel[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetOrdersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetOrdersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ClientApplication.ServiceReference1.OrderModel[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ClientApplication.ServiceReference1.OrderModel[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<ClientApplication.ServiceReference1.IService>, ClientApplication.ServiceReference1.IService {
        
        private BeginOperationDelegate onBeginInsertCustomerDelegate;
        
        private EndOperationDelegate onEndInsertCustomerDelegate;
        
        private System.Threading.SendOrPostCallback onInsertCustomerCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateCustomerDelegate;
        
        private EndOperationDelegate onEndUpdateCustomerDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateCustomerCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteCustomerDelegate;
        
        private EndOperationDelegate onEndDeleteCustomerDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteCustomerCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCustomersDelegate;
        
        private EndOperationDelegate onEndGetCustomersDelegate;
        
        private System.Threading.SendOrPostCallback onGetCustomersCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetOrdersDelegate;
        
        private EndOperationDelegate onEndGetOrdersDelegate;
        
        private System.Threading.SendOrPostCallback onGetOrdersCompletedDelegate;
        
        private BeginOperationDelegate onBeginInsertOrderDelegate;
        
        private EndOperationDelegate onEndInsertOrderDelegate;
        
        private System.Threading.SendOrPostCallback onInsertOrderCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateOrderDelegate;
        
        private EndOperationDelegate onEndUpdateOrderDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateOrderCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteOrderDelegate;
        
        private EndOperationDelegate onEndDeleteOrderDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteOrderCompletedDelegate;
        
        public ServiceClient() {
        }
        
        public ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> InsertCustomerCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateCustomerCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteCustomerCompleted;
        
        public event System.EventHandler<GetCustomersCompletedEventArgs> GetCustomersCompleted;
        
        public event System.EventHandler<GetOrdersCompletedEventArgs> GetOrdersCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> InsertOrderCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateOrderCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteOrderCompleted;
        
        public void InsertCustomer(string name, int orders, int sales) {
            base.Channel.InsertCustomer(name, orders, sales);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginInsertCustomer(string name, int orders, int sales, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginInsertCustomer(name, orders, sales, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndInsertCustomer(System.IAsyncResult result) {
            base.Channel.EndInsertCustomer(result);
        }
        
        private System.IAsyncResult OnBeginInsertCustomer(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string name = ((string)(inValues[0]));
            int orders = ((int)(inValues[1]));
            int sales = ((int)(inValues[2]));
            return this.BeginInsertCustomer(name, orders, sales, callback, asyncState);
        }
        
        private object[] OnEndInsertCustomer(System.IAsyncResult result) {
            this.EndInsertCustomer(result);
            return null;
        }
        
        private void OnInsertCustomerCompleted(object state) {
            if ((this.InsertCustomerCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.InsertCustomerCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void InsertCustomerAsync(string name, int orders, int sales) {
            this.InsertCustomerAsync(name, orders, sales, null);
        }
        
        public void InsertCustomerAsync(string name, int orders, int sales, object userState) {
            if ((this.onBeginInsertCustomerDelegate == null)) {
                this.onBeginInsertCustomerDelegate = new BeginOperationDelegate(this.OnBeginInsertCustomer);
            }
            if ((this.onEndInsertCustomerDelegate == null)) {
                this.onEndInsertCustomerDelegate = new EndOperationDelegate(this.OnEndInsertCustomer);
            }
            if ((this.onInsertCustomerCompletedDelegate == null)) {
                this.onInsertCustomerCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnInsertCustomerCompleted);
            }
            base.InvokeAsync(this.onBeginInsertCustomerDelegate, new object[] {
                        name,
                        orders,
                        sales}, this.onEndInsertCustomerDelegate, this.onInsertCustomerCompletedDelegate, userState);
        }
        
        public void UpdateCustomer(int id, string name, int orders, int sales) {
            base.Channel.UpdateCustomer(id, name, orders, sales);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateCustomer(int id, string name, int orders, int sales, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateCustomer(id, name, orders, sales, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateCustomer(System.IAsyncResult result) {
            base.Channel.EndUpdateCustomer(result);
        }
        
        private System.IAsyncResult OnBeginUpdateCustomer(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int id = ((int)(inValues[0]));
            string name = ((string)(inValues[1]));
            int orders = ((int)(inValues[2]));
            int sales = ((int)(inValues[3]));
            return this.BeginUpdateCustomer(id, name, orders, sales, callback, asyncState);
        }
        
        private object[] OnEndUpdateCustomer(System.IAsyncResult result) {
            this.EndUpdateCustomer(result);
            return null;
        }
        
        private void OnUpdateCustomerCompleted(object state) {
            if ((this.UpdateCustomerCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateCustomerCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateCustomerAsync(int id, string name, int orders, int sales) {
            this.UpdateCustomerAsync(id, name, orders, sales, null);
        }
        
        public void UpdateCustomerAsync(int id, string name, int orders, int sales, object userState) {
            if ((this.onBeginUpdateCustomerDelegate == null)) {
                this.onBeginUpdateCustomerDelegate = new BeginOperationDelegate(this.OnBeginUpdateCustomer);
            }
            if ((this.onEndUpdateCustomerDelegate == null)) {
                this.onEndUpdateCustomerDelegate = new EndOperationDelegate(this.OnEndUpdateCustomer);
            }
            if ((this.onUpdateCustomerCompletedDelegate == null)) {
                this.onUpdateCustomerCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateCustomerCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateCustomerDelegate, new object[] {
                        id,
                        name,
                        orders,
                        sales}, this.onEndUpdateCustomerDelegate, this.onUpdateCustomerCompletedDelegate, userState);
        }
        
        public void DeleteCustomer(int id) {
            base.Channel.DeleteCustomer(id);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDeleteCustomer(int id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteCustomer(id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDeleteCustomer(System.IAsyncResult result) {
            base.Channel.EndDeleteCustomer(result);
        }
        
        private System.IAsyncResult OnBeginDeleteCustomer(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int id = ((int)(inValues[0]));
            return this.BeginDeleteCustomer(id, callback, asyncState);
        }
        
        private object[] OnEndDeleteCustomer(System.IAsyncResult result) {
            this.EndDeleteCustomer(result);
            return null;
        }
        
        private void OnDeleteCustomerCompleted(object state) {
            if ((this.DeleteCustomerCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteCustomerCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteCustomerAsync(int id) {
            this.DeleteCustomerAsync(id, null);
        }
        
        public void DeleteCustomerAsync(int id, object userState) {
            if ((this.onBeginDeleteCustomerDelegate == null)) {
                this.onBeginDeleteCustomerDelegate = new BeginOperationDelegate(this.OnBeginDeleteCustomer);
            }
            if ((this.onEndDeleteCustomerDelegate == null)) {
                this.onEndDeleteCustomerDelegate = new EndOperationDelegate(this.OnEndDeleteCustomer);
            }
            if ((this.onDeleteCustomerCompletedDelegate == null)) {
                this.onDeleteCustomerCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteCustomerCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteCustomerDelegate, new object[] {
                        id}, this.onEndDeleteCustomerDelegate, this.onDeleteCustomerCompletedDelegate, userState);
        }
        
        public ClientApplication.ServiceReference1.CustomerModel[] GetCustomers() {
            return base.Channel.GetCustomers();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetCustomers(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCustomers(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public ClientApplication.ServiceReference1.CustomerModel[] EndGetCustomers(System.IAsyncResult result) {
            return base.Channel.EndGetCustomers(result);
        }
        
        private System.IAsyncResult OnBeginGetCustomers(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetCustomers(callback, asyncState);
        }
        
        private object[] OnEndGetCustomers(System.IAsyncResult result) {
            ClientApplication.ServiceReference1.CustomerModel[] retVal = this.EndGetCustomers(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCustomersCompleted(object state) {
            if ((this.GetCustomersCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCustomersCompleted(this, new GetCustomersCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCustomersAsync() {
            this.GetCustomersAsync(null);
        }
        
        public void GetCustomersAsync(object userState) {
            if ((this.onBeginGetCustomersDelegate == null)) {
                this.onBeginGetCustomersDelegate = new BeginOperationDelegate(this.OnBeginGetCustomers);
            }
            if ((this.onEndGetCustomersDelegate == null)) {
                this.onEndGetCustomersDelegate = new EndOperationDelegate(this.OnEndGetCustomers);
            }
            if ((this.onGetCustomersCompletedDelegate == null)) {
                this.onGetCustomersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCustomersCompleted);
            }
            base.InvokeAsync(this.onBeginGetCustomersDelegate, null, this.onEndGetCustomersDelegate, this.onGetCustomersCompletedDelegate, userState);
        }
        
        public ClientApplication.ServiceReference1.OrderModel[] GetOrders() {
            return base.Channel.GetOrders();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetOrders(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetOrders(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public ClientApplication.ServiceReference1.OrderModel[] EndGetOrders(System.IAsyncResult result) {
            return base.Channel.EndGetOrders(result);
        }
        
        private System.IAsyncResult OnBeginGetOrders(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetOrders(callback, asyncState);
        }
        
        private object[] OnEndGetOrders(System.IAsyncResult result) {
            ClientApplication.ServiceReference1.OrderModel[] retVal = this.EndGetOrders(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetOrdersCompleted(object state) {
            if ((this.GetOrdersCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetOrdersCompleted(this, new GetOrdersCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetOrdersAsync() {
            this.GetOrdersAsync(null);
        }
        
        public void GetOrdersAsync(object userState) {
            if ((this.onBeginGetOrdersDelegate == null)) {
                this.onBeginGetOrdersDelegate = new BeginOperationDelegate(this.OnBeginGetOrders);
            }
            if ((this.onEndGetOrdersDelegate == null)) {
                this.onEndGetOrdersDelegate = new EndOperationDelegate(this.OnEndGetOrders);
            }
            if ((this.onGetOrdersCompletedDelegate == null)) {
                this.onGetOrdersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetOrdersCompleted);
            }
            base.InvokeAsync(this.onBeginGetOrdersDelegate, null, this.onEndGetOrdersDelegate, this.onGetOrdersCompletedDelegate, userState);
        }
        
        public void InsertOrder(int customerId, System.DateTime orderedDate, System.DateTime filledDate, string status, int amount) {
            base.Channel.InsertOrder(customerId, orderedDate, filledDate, status, amount);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginInsertOrder(int customerId, System.DateTime orderedDate, System.DateTime filledDate, string status, int amount, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginInsertOrder(customerId, orderedDate, filledDate, status, amount, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndInsertOrder(System.IAsyncResult result) {
            base.Channel.EndInsertOrder(result);
        }
        
        private System.IAsyncResult OnBeginInsertOrder(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int customerId = ((int)(inValues[0]));
            System.DateTime orderedDate = ((System.DateTime)(inValues[1]));
            System.DateTime filledDate = ((System.DateTime)(inValues[2]));
            string status = ((string)(inValues[3]));
            int amount = ((int)(inValues[4]));
            return this.BeginInsertOrder(customerId, orderedDate, filledDate, status, amount, callback, asyncState);
        }
        
        private object[] OnEndInsertOrder(System.IAsyncResult result) {
            this.EndInsertOrder(result);
            return null;
        }
        
        private void OnInsertOrderCompleted(object state) {
            if ((this.InsertOrderCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.InsertOrderCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void InsertOrderAsync(int customerId, System.DateTime orderedDate, System.DateTime filledDate, string status, int amount) {
            this.InsertOrderAsync(customerId, orderedDate, filledDate, status, amount, null);
        }
        
        public void InsertOrderAsync(int customerId, System.DateTime orderedDate, System.DateTime filledDate, string status, int amount, object userState) {
            if ((this.onBeginInsertOrderDelegate == null)) {
                this.onBeginInsertOrderDelegate = new BeginOperationDelegate(this.OnBeginInsertOrder);
            }
            if ((this.onEndInsertOrderDelegate == null)) {
                this.onEndInsertOrderDelegate = new EndOperationDelegate(this.OnEndInsertOrder);
            }
            if ((this.onInsertOrderCompletedDelegate == null)) {
                this.onInsertOrderCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnInsertOrderCompleted);
            }
            base.InvokeAsync(this.onBeginInsertOrderDelegate, new object[] {
                        customerId,
                        orderedDate,
                        filledDate,
                        status,
                        amount}, this.onEndInsertOrderDelegate, this.onInsertOrderCompletedDelegate, userState);
        }
        
        public void UpdateOrder(int id, int customerId, System.DateTime orderedDate, System.DateTime filledDate, string status, int amount) {
            base.Channel.UpdateOrder(id, customerId, orderedDate, filledDate, status, amount);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateOrder(int id, int customerId, System.DateTime orderedDate, System.DateTime filledDate, string status, int amount, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateOrder(id, customerId, orderedDate, filledDate, status, amount, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateOrder(System.IAsyncResult result) {
            base.Channel.EndUpdateOrder(result);
        }
        
        private System.IAsyncResult OnBeginUpdateOrder(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int id = ((int)(inValues[0]));
            int customerId = ((int)(inValues[1]));
            System.DateTime orderedDate = ((System.DateTime)(inValues[2]));
            System.DateTime filledDate = ((System.DateTime)(inValues[3]));
            string status = ((string)(inValues[4]));
            int amount = ((int)(inValues[5]));
            return this.BeginUpdateOrder(id, customerId, orderedDate, filledDate, status, amount, callback, asyncState);
        }
        
        private object[] OnEndUpdateOrder(System.IAsyncResult result) {
            this.EndUpdateOrder(result);
            return null;
        }
        
        private void OnUpdateOrderCompleted(object state) {
            if ((this.UpdateOrderCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateOrderCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateOrderAsync(int id, int customerId, System.DateTime orderedDate, System.DateTime filledDate, string status, int amount) {
            this.UpdateOrderAsync(id, customerId, orderedDate, filledDate, status, amount, null);
        }
        
        public void UpdateOrderAsync(int id, int customerId, System.DateTime orderedDate, System.DateTime filledDate, string status, int amount, object userState) {
            if ((this.onBeginUpdateOrderDelegate == null)) {
                this.onBeginUpdateOrderDelegate = new BeginOperationDelegate(this.OnBeginUpdateOrder);
            }
            if ((this.onEndUpdateOrderDelegate == null)) {
                this.onEndUpdateOrderDelegate = new EndOperationDelegate(this.OnEndUpdateOrder);
            }
            if ((this.onUpdateOrderCompletedDelegate == null)) {
                this.onUpdateOrderCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateOrderCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateOrderDelegate, new object[] {
                        id,
                        customerId,
                        orderedDate,
                        filledDate,
                        status,
                        amount}, this.onEndUpdateOrderDelegate, this.onUpdateOrderCompletedDelegate, userState);
        }
        
        public void DeleteOrder(int id) {
            base.Channel.DeleteOrder(id);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDeleteOrder(int id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteOrder(id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDeleteOrder(System.IAsyncResult result) {
            base.Channel.EndDeleteOrder(result);
        }
        
        private System.IAsyncResult OnBeginDeleteOrder(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int id = ((int)(inValues[0]));
            return this.BeginDeleteOrder(id, callback, asyncState);
        }
        
        private object[] OnEndDeleteOrder(System.IAsyncResult result) {
            this.EndDeleteOrder(result);
            return null;
        }
        
        private void OnDeleteOrderCompleted(object state) {
            if ((this.DeleteOrderCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteOrderCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteOrderAsync(int id) {
            this.DeleteOrderAsync(id, null);
        }
        
        public void DeleteOrderAsync(int id, object userState) {
            if ((this.onBeginDeleteOrderDelegate == null)) {
                this.onBeginDeleteOrderDelegate = new BeginOperationDelegate(this.OnBeginDeleteOrder);
            }
            if ((this.onEndDeleteOrderDelegate == null)) {
                this.onEndDeleteOrderDelegate = new EndOperationDelegate(this.OnEndDeleteOrder);
            }
            if ((this.onDeleteOrderCompletedDelegate == null)) {
                this.onDeleteOrderCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteOrderCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteOrderDelegate, new object[] {
                        id}, this.onEndDeleteOrderDelegate, this.onDeleteOrderCompletedDelegate, userState);
        }
    }
}
