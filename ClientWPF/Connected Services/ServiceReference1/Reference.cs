//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceReference1
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CustomerModel", Namespace="http://schemas.datacontract.org/2004/07/Final_Katrina_Mehta")]
    public partial class CustomerModel : object
    {
        
        private int CustomerIDField;
        
        private string CustomerNameField;
        
        private int YTDOrdersField;
        
        private int YTDSalesField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CustomerID
        {
            get
            {
                return this.CustomerIDField;
            }
            set
            {
                this.CustomerIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CustomerName
        {
            get
            {
                return this.CustomerNameField;
            }
            set
            {
                this.CustomerNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int YTDOrders
        {
            get
            {
                return this.YTDOrdersField;
            }
            set
            {
                this.YTDOrdersField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int YTDSales
        {
            get
            {
                return this.YTDSalesField;
            }
            set
            {
                this.YTDSalesField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OrderModel", Namespace="http://schemas.datacontract.org/2004/07/Final_Katrina_Mehta")]
    public partial class OrderModel : object
    {
        
        private int AmountField;
        
        private int CustomerIDField;
        
        private System.Nullable<System.DateTime> FilledDateField;
        
        private System.DateTime OrderDateField;
        
        private int OrderIDField;
        
        private string StatusField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Amount
        {
            get
            {
                return this.AmountField;
            }
            set
            {
                this.AmountField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CustomerID
        {
            get
            {
                return this.CustomerIDField;
            }
            set
            {
                this.CustomerIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> FilledDate
        {
            get
            {
                return this.FilledDateField;
            }
            set
            {
                this.FilledDateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime OrderDate
        {
            get
            {
                return this.OrderDateField;
            }
            set
            {
                this.OrderDateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OrderID
        {
            get
            {
                return this.OrderIDField;
            }
            set
            {
                this.OrderIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Status
        {
            get
            {
                return this.StatusField;
            }
            set
            {
                this.StatusField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService")]
    public interface IService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InsertCustomer", ReplyAction="http://tempuri.org/IService/InsertCustomerResponse")]
        void InsertCustomer(string name, int orders, int sales);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InsertCustomer", ReplyAction="http://tempuri.org/IService/InsertCustomerResponse")]
        System.Threading.Tasks.Task InsertCustomerAsync(string name, int orders, int sales);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateCustomer", ReplyAction="http://tempuri.org/IService/UpdateCustomerResponse")]
        void UpdateCustomer(int id, string name, int orders, int sales);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateCustomer", ReplyAction="http://tempuri.org/IService/UpdateCustomerResponse")]
        System.Threading.Tasks.Task UpdateCustomerAsync(int id, string name, int orders, int sales);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteCustomer", ReplyAction="http://tempuri.org/IService/DeleteCustomerResponse")]
        void DeleteCustomer(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteCustomer", ReplyAction="http://tempuri.org/IService/DeleteCustomerResponse")]
        System.Threading.Tasks.Task DeleteCustomerAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetCustomers", ReplyAction="http://tempuri.org/IService/GetCustomersResponse")]
        ServiceReference1.CustomerModel[] GetCustomers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetCustomers", ReplyAction="http://tempuri.org/IService/GetCustomersResponse")]
        System.Threading.Tasks.Task<ServiceReference1.CustomerModel[]> GetCustomersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetOrders", ReplyAction="http://tempuri.org/IService/GetOrdersResponse")]
        ServiceReference1.OrderModel[] GetOrders();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetOrders", ReplyAction="http://tempuri.org/IService/GetOrdersResponse")]
        System.Threading.Tasks.Task<ServiceReference1.OrderModel[]> GetOrdersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InsertOrder", ReplyAction="http://tempuri.org/IService/InsertOrderResponse")]
        void InsertOrder(int customerId, System.DateTime orderedDate, System.DateTime filledDate, string status, int amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InsertOrder", ReplyAction="http://tempuri.org/IService/InsertOrderResponse")]
        System.Threading.Tasks.Task InsertOrderAsync(int customerId, System.DateTime orderedDate, System.DateTime filledDate, string status, int amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateOrder", ReplyAction="http://tempuri.org/IService/UpdateOrderResponse")]
        void UpdateOrder(int id, int customerId, System.DateTime orderedDate, System.DateTime filledDate, string status, int amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateOrder", ReplyAction="http://tempuri.org/IService/UpdateOrderResponse")]
        System.Threading.Tasks.Task UpdateOrderAsync(int id, int customerId, System.DateTime orderedDate, System.DateTime filledDate, string status, int amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteOrder", ReplyAction="http://tempuri.org/IService/DeleteOrderResponse")]
        void DeleteOrder(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteOrder", ReplyAction="http://tempuri.org/IService/DeleteOrderResponse")]
        System.Threading.Tasks.Task DeleteOrderAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface IServiceChannel : ServiceReference1.IService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<ServiceReference1.IService>, ServiceReference1.IService
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public ServiceClient() : 
                base(ServiceClient.GetDefaultBinding(), ServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(ServiceClient.GetBindingForEndpoint(endpointConfiguration), ServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(ServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(ServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public void InsertCustomer(string name, int orders, int sales)
        {
            base.Channel.InsertCustomer(name, orders, sales);
        }
        
        public System.Threading.Tasks.Task InsertCustomerAsync(string name, int orders, int sales)
        {
            return base.Channel.InsertCustomerAsync(name, orders, sales);
        }
        
        public void UpdateCustomer(int id, string name, int orders, int sales)
        {
            base.Channel.UpdateCustomer(id, name, orders, sales);
        }
        
        public System.Threading.Tasks.Task UpdateCustomerAsync(int id, string name, int orders, int sales)
        {
            return base.Channel.UpdateCustomerAsync(id, name, orders, sales);
        }
        
        public void DeleteCustomer(int id)
        {
            base.Channel.DeleteCustomer(id);
        }
        
        public System.Threading.Tasks.Task DeleteCustomerAsync(int id)
        {
            return base.Channel.DeleteCustomerAsync(id);
        }
        
        public ServiceReference1.CustomerModel[] GetCustomers()
        {
            return base.Channel.GetCustomers();
        }
        
        public System.Threading.Tasks.Task<ServiceReference1.CustomerModel[]> GetCustomersAsync()
        {
            return base.Channel.GetCustomersAsync();
        }
        
        public ServiceReference1.OrderModel[] GetOrders()
        {
            return base.Channel.GetOrders();
        }
        
        public System.Threading.Tasks.Task<ServiceReference1.OrderModel[]> GetOrdersAsync()
        {
            return base.Channel.GetOrdersAsync();
        }
        
        public void InsertOrder(int customerId, System.DateTime orderedDate, System.DateTime filledDate, string status, int amount)
        {
            base.Channel.InsertOrder(customerId, orderedDate, filledDate, status, amount);
        }
        
        public System.Threading.Tasks.Task InsertOrderAsync(int customerId, System.DateTime orderedDate, System.DateTime filledDate, string status, int amount)
        {
            return base.Channel.InsertOrderAsync(customerId, orderedDate, filledDate, status, amount);
        }
        
        public void UpdateOrder(int id, int customerId, System.DateTime orderedDate, System.DateTime filledDate, string status, int amount)
        {
            base.Channel.UpdateOrder(id, customerId, orderedDate, filledDate, status, amount);
        }
        
        public System.Threading.Tasks.Task UpdateOrderAsync(int id, int customerId, System.DateTime orderedDate, System.DateTime filledDate, string status, int amount)
        {
            return base.Channel.UpdateOrderAsync(id, customerId, orderedDate, filledDate, status, amount);
        }
        
        public void DeleteOrder(int id)
        {
            base.Channel.DeleteOrder(id);
        }
        
        public System.Threading.Tasks.Task DeleteOrderAsync(int id)
        {
            return base.Channel.DeleteOrderAsync(id);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IService))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IService))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:52617/Service1.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return ServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return ServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IService);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IService,
        }
    }
}
